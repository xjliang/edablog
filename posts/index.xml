<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Synlab</title>
    <link>https://xjliang.github.io/synlab/posts/</link>
    <description>Recent content in Posts on Synlab</description>
    <image>
      <url>http://localhost:1313/home.jpg</url>
      <link>http://localhost:1313/home.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy 2022 - 2022</copyright>
    <lastBuildDate>Sun, 20 Sep 2020 21:14:57 +0800</lastBuildDate><atom:link href="https://xjliang.github.io/synlab/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何在两周内学会C&#43;&#43;并构建优质的项目</title>
      <link>https://xjliang.github.io/synlab/posts/code/learn-cpp/learn-cpp/</link>
      <pubDate>Sun, 20 Sep 2020 21:14:57 +0800</pubDate>
      
      <guid>https://xjliang.github.io/synlab/posts/code/learn-cpp/learn-cpp/</guid>
      <description>简介 最近因为科研需要，捡起了好几年前大学水平的C++（不忍直视），毫无意外地忘记地一干二净。于是两周后就有了这篇文章，期望能够帮助所有拥有一定编程基础（至少写过一个完整的项目的那种）的同学入门并掌握这一门编程语言。通过阅读这篇文章，你能够学到：
 用优质的资源，快速学习C++的语法构成 指针和防止内存泄漏等，较难的需要实战（编码）的内容 C++标准的现代化目录结构 利用CMake来进行跨平台开发/编译，把开发的软件安装到系统中 利用Catch2来编写单元测试，集成到CMake中去 Doxygen自动化生成API文档 Shell脚本与CMake联动，进一步实现自动化（龟速更新中） 跨系统交叉编译，做成Docker镜像（未来用到了再更）  我的开发平台是&amp;quot;macOS Catalina&amp;rdquo;，选择的IDE是&amp;quot;vscode&amp;rdquo;，编译器采用了&amp;quot;g++&amp;rdquo;，在考虑兼容性和新特性之后，我选择了&amp;quot;c++17&amp;quot;版本进行开发。文中许多的资源，是需要梯子才能够访问的，这点请注意。
快速学习C++语法结构 写出你的 &amp;ldquo;Hello, world!&amp;quot;（VSCODE配置） 首先，让我们从简单难度开始：在你的本地代码仓库中建立一个文件夹，名字随意，创建一个 hello.cc 文件并保存，内容如下（现在不需要去关心这些内容代表什么）：
#include &amp;lt;iostream&amp;gt; int main() { std::cout &amp;lt;&amp;lt; &amp;#34;hello, world!&amp;#34; &amp;lt;&amp;lt; std::endl; return 0; } 打开 terminal 以后，你就可以进行手动编译了：
# 编译 g++ hello.cc -o hello.o # 运行 ./hello.o 当然，每次进行这样的手动编译，实在繁琐并且无法进行断点调试。在VSCODE中编写C++项目，首先你要安装一个&amp;quot;C/C++&amp;quot;的扩展，然后打开刚才存放 hello.cc 的目录，双击打开 hello.cc 以后，按住 cmd+shift+p 呼出vscode的命令面板，输入 tasks: 索引到 &amp;ldquo;Tasks: Configure Task&amp;rdquo;（如图所示）选择编译器，这里我选择了g++作为编译器，之后你能在.vscode目录下发现自动创建出的 &amp;ldquo;tasks.json&amp;rdquo;（当然我们要进行修改）
之后选择左侧的调试按钮，创建一个 &amp;ldquo;launch.json&amp;rdquo;，附上我的两个配置文件如下：
 .vscode/task.json  { &amp;#34;version&amp;#34;: &amp;#34;2.0.0&amp;#34;, &amp;#34;tasks&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;shell&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;C/C++: g++ build active file&amp;#34;, &amp;#34;command&amp;#34;: &amp;#34;/usr/bin/g++&amp;#34;, &amp;#34;args&amp;#34;: [ &amp;#34;-std=c++17&amp;#34;, &amp;#34;-g&amp;#34;, &amp;#34;${file}&amp;#34;, &amp;#34;-o&amp;#34;, &amp;#34;${fileDirname}/caches/${fileBasenameNoExtension}.</description>
    </item>
    
    <item>
      <title>linux常用工具和软件</title>
      <link>https://xjliang.github.io/synlab/posts/tools/linux-tools/</link>
      <pubDate>Thu, 04 Jul 2019 14:54:57 +0800</pubDate>
      
      <guid>https://xjliang.github.io/synlab/posts/tools/linux-tools/</guid>
      <description>引言 一直在Linux上工作，当更换新电脑或者发行版时，往往会忘记曾经在背后稳定默默工作着的“好家伙”们。我希望把这些好的开源项目工具都收录起来，甚至编写成一键安装脚本。我的系统是基于ArchLinux的，所以许多包会采用AUR的方式记录在此。我相信即便是其他发行版，你也能够找到相应的办法编译安装的。最后，这里也顺便推荐一下基于Arch的发行版Manjaro with XFCE，我非常喜欢它的高效和稳定。
系统工具 v2ray Project V，相当现代化的梯子，同时可以作为客户端和服务端，甚至是一个总的网络代理分发程序。服务端搭建详情可以参考博文博客系统构建（二）：V2ray 。
 Package: v2ray（Arch官方仓库带有此软件，可以直接使用pacman安装） Github: https://github.com/v2ray/v2ray-core  motrix motrix，很漂亮的下载工具，底层是调用了aria2的。支持magnet和torrent。但是因为是基于electron制作的，编译稍显繁琐（又是npm，我的天），值得一提的是作者还给国内IP加入了NPM镜像加速功能。
 AUR: https://aur.archlinux.org/motrix.git Github: https://github.com/agalwood/Motrix  proxychains proxychains-ng，能够使某一行命令全部走http（或者socks）代理。相当取巧好用的玩意儿，配合下面的privoxy食用更加舒适。
 Package: proxychains-ng Github: https://github.com/rofl0r/proxychains-ng  privoxy privoxy，能将socks协议代理转换成http协议并监听。配合bash环境变量，这样做能让你在终端里挂起全局代理，十分推荐的东西。
 Package: privoxy  virtual box virtual box，当你需要运行一个windows虚拟机的时候（希望不会有这种时刻），你会需要用到它。它比vmware更加轻量稳定，记得若需要安装64位系统则需要在主板里打开处理器的虚拟化服务。
 Package: virtualbox  编辑器 vim vim大法好，大法好，好！多的不说了，我日常的编辑工具。哦对了，你最好安装gvim因为这样能提供系统级的剪切板，重要！
 Package: gvim  vscode Uh-huh，每次使用微软家的东西就让我很纠结。不喜欢使用vim的朋友，推荐给你们吧，号称宇宙第二的IDE（第一当然是VisualStudio，这玩意儿很贵并且只能运行在win上）。vscode开源免费，使用MIT许可。我只有在调试很复杂的程序的时候才会打开它。
 Package: code AUR: https://aur.archlinux.org/visual-studio-code-bin.git Github: https://github.com/microsoft/vscode  国外主流服务 onedrive OneDrive Free Client，一个onedrive的命令行版。需要用你微软ID生成的KEY授权后使用，详见Github的项目主页。
 AUR: https://aur.archlinux.org/onedrive-abraunegg.git Github: https://github.</description>
    </item>
    
  </channel>
</rss>
